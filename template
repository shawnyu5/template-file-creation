#!/bin/bash
#to get the current date
var=`date +"%FORMAT_STRING"`
now=`date +"%m_%d_%Y"`
now=`date +"%Y-%m-%d"`
function bash 
{
	echo -e "#!/bin/bash
#purpose of this file: 
#Date: ${now} 
#---------------------------------




" > "$NAME.sh"
	#echo "file $NAME.sh created!"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.sh in new VS code window"
		code -n $NAME.sh
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.sh in VS code"
		code $NAME.sh
	else
		vim $NAME.sh
	fi
	chmod +x "$NAME.sh"
	exit 0; 	
}

function cpp
{
	echo -e "//purpose of this file: 
//Date: ${now}
//---------------------------------
#include <iostream>
#include <string.h>
#include <string>
using namespace std;

int main ()
{

}

" > "$NAME.cpp"
	#echo "file $NAME.cpp created!"
	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.cpp in new VS code window"
		code -n $NAME.cpp
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.cpp in VS code"
		code $NAME.cpp
	else
		vim $NAME.cpp
	fi
	chmod +x "$NAME.cpp"

	exit 0; 
}
function html
{
	echo -e "<!--purpose of this file: 
Date: ${now}
--------------------------------- -->
<html>

</html>

" > "$NAME.html"


	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.html in new VS code window"
		code -n $NAME.html
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.html in VS code"
		code $NAME.html
	else
		vim $NAME.html
	fi

	exit 0;
}


function compile
{
	#check if an arguments were passed in
	if [ "$#" -eq 0 ]; then
		echo 'USAGE: template -compile <files to compile.cpp>'
		exit 1; 
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT
	
	#finding all dependicies in all .cpp files. HAS TO IGNORE .h FILES
	FILES_FOUND=0 # to keep track of number of files found
	DEPENDENCIES=()
	for j in "$@"; do
		#if .h file detected, ignore file
		if [[ "$j" == "*.h" ]]; then
			continue;
		fi
		echo "in forloop"
		echo "current file is $j"
		#parses through .cpp files individually and finds all #include "". strips everything outside the quotes, leaving only the file name inside the double quote
		TMP=$(grep '#include "' $j | cut -d "\"" -f2) #| sed 's/\..*//')
		#| sed -n "${FILES_FOUND}p
		echo "after parse is $TMP"
		DEPENDENCIES+=( ${TMP} )
		echo "DEPENDENCIES are ${DEPENDENCIES[@]}"
		FILES_FOUND=$((FILES_FOUND+1))
	done 

	#echo array: ${FILES[0]}
	#exit

	echo -e "#purpose of the file: to compile $OUTPUT 
#date: ${now}
#-------------------------------------------------
CC=g++
" > 'makefile'

	printf 'output: ' >> 'makefile'
	#sets the first output option in the file by appening all files after "output: "
	for CURRENT in $@; do
		printf '%s.o ' "$CURRENT" >> 'makefile'
	done

	for((x=0; x<$FILES_FOUND; x++)); do
		#need to check if depencies exist by checking if the current array index is empt or not
		if [[ ${#DEPENDENCIES[@]} -eq 0 ]]; then
			#if no dependicies, exit loop
			break
		fi
		#if dependcies do exist, add to the file
		echo -e "${DEPENDENCIES[$x]}: 
	\$(CC) -c ${DEPENDENCIES[$x]} ${DEPENDENCIES[$x]}" >> 'makefile'
	#do this for the number of dependcies found
	done

	#finally add clean
	echo -e "clean: 
	rm *.o $OUTPUT" >> "makefile" 
	exit 0
}

function .h
{
	echo -e "//purpose of this file:
//Date: ${now}
//---------------------------------
#define _CRT_SECURE_NO_WARNINGS
#ifndef SDDS_${NAME^^}_H_
#define SDDS_${NAME^^}_H_
#include <iostream>
#include <string>
#include <cstring>
using namespace std; 


#endif" > "$NAME.h"
	chmod +x "$NAME.h"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.h in new VS code window"
		code -n $NAME.h
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.h in VS code"
		code $NAME.h
	else
		vim $NAME.h
	fi

	exit 0;
}

function readme
{
	touch README.md
	if [ "$CODE" = 'new' ]; then 
		echo "opening README.md in new VS code window"
		code -n README.md
	elif [ "$CODE" = 'true' ]; then
		echo "opening README.md in VS code"
		code README.md
	else
		vim README.md
	fi

	exit 0; 
}

function main
{
	#flag to determine if code will be opened in vs code or not
	CODE='false'

	#if -c option is passed in, it will open file in code instead of vim and discard flag
	if [ "$1" = '-cn' ]; then
		CODE='new';
		shift 1
	elif [ "$1" = '-c' ]; then
		CODE='true'
		shift 1
	fi

	#if compile flag is passed in, then create special template for compiling a c++ program and end script
	if [ "$1" = '-compile' ]; then
		shift 1
		compile $@
	fi

	#if read flag is passed in, it will create a README.md file and end script
	if [ "$1" = 'read' ] || [ "$1" = 'readme' ]; then
		readme
		exit 0; 
	fi

	#if no arguments are passed in, it will ask for an argument. else it will store first arguement in name variable
	if [ "$#" -eq 0 ]; then
		echo 'What will be the name of the file'
		read NAME
	else #or name of the file can be passed in as an argument
		NAME=$1
	fi

	echo 'what will be the format of the file? (cpp, sh, .h, html, read(REAMDE.md) and compile template)'
	read LANUAGE
	INPUT='false'
	while [ "$INPUT" = "false" ]; do
		
		case "$LANUAGE" in 
			'cpp') cpp ;;
			'sh') bash ;;
			'.h') .h ;;
			'readme') readme ;;
			'read') readme ;;
			'html') html ;;
			*) echo "***$LANUAGE*** is not a supported formate, supported formats are cpp, sh, .h, html, read(README.md) and compile template"

			echo 'what will be the name of the file'
			read NAME

			echo 'what format would you like? (cpp, sh, .h, html, read(REAMDE.md) and compile template)'
			read LANUAGE;;  
		esac
	done
}

main $@
