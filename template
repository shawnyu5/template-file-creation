#!/bin/bash
#to get the current date
var=`date +"%FORMAT_STRING"`
now=`date +"%m_%d_%Y"`
now=`date +"%Y-%m-%d"`
function bash 
{
	echo -e "#!/bin/bash
#purpose of this file: 
#Date: ${now}
#---------------------------------




" > "$FILE_NAME.sh"
	chmod +x $FILE_NAME.sh

	if [ "$CODE" = 'new' ]; then 
		echo "opening $FILE_NAME.sh in new VS code window"
		code -n $FILE_NAME.sh

	elif [ "$CODE" = 'true' ]; then
		echo "opening $FILE_NAME.sh in VS code"
		code $FILE_NAME.sh

	elif [ "$CODE" = 'none' ];then
		echo "$FILE_NAME.sh created"
	else
		$EDITOR $FILE_NAME.sh
	fi
    exit 0
}

function cpp
{
	echo -e "//purpose of this file: 
//Date: ${now}
//---------------------------------
#include <iostream>
#include <string>
#include <utility>
#include <iomanip>
using std::cout;
using std::endl;
using std::string;

int main ()
{

}

" > "$FILE_NAME.cpp"
	#echo "file $FILE_NAME.cpp created!"
	if [ "$CODE" = 'new' ]; then 
		echo "opening $FILE_NAME.cpp in new VS code window"
		code -n $FILE_NAME.cpp
	elif [ "$CODE" = 'true' ]; then
		echo "opening $FILE_NAME.cpp in VS code"
		code $FILE_NAME.cpp
	elif [ "$CODE" = 'none' ];then
		echo "$FILE_NAME.cpp created"
	else
		$EDITOR $FILE_NAME.cpp
	fi

    exit 0
}

function html
{
	echo -e "<!--purpose of this file: 
Date: ${now}
--------------------------------- -->
<!DOCTYPE html>
<html lang="en">
<head>
</head>
<body>

    <script>
    </script>
</body>
</html>
" > "$FILE_NAME.html"


	if [ "$CODE" = 'new' ]; then 
		echo "opening $FILE_NAME.html in new VS code window"
		code -n $FILE_NAME.html
	elif [ "$CODE" = 'true' ]; then
		echo "opening $FILE_NAME.html in VS code"
		code $FILE_NAME.html
	elif [ "$CODE" = 'none' ];then
		echo "$FILE_NAME.html created"
	else
		$EDITOR $FILE_NAME.html
	fi

    exit 0
}

function compile
{
	#echo $@
	if [ "$#" -eq 0 ]; then
		echo 'please pass in files to compile as arguments'
		exit 1;
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT

	echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
g++ -g -Wall -o $OUTPUT $@ && ./$OUTPUT" > "compile_$OUTPUT.sh"

	chmod +x "compile_$OUTPUT.sh"
    exit 0
}


function debug
{
	if [ "$#" -eq 0 ]; then
		echo 'please pass in files to compile as arguments'
		exit 1;
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT

	echo -e "#purpose of the file: to debug $OUTPUT
#date: ${now}
#-------------------------------------------------
g++ -g -o $OUTPUT $@ && valgrind -s --leak-check=full --show-leak-kinds=all ./$OUTPUT" > "debug_$OUTPUT.sh"

	chmod +x "debug_$OUTPUT.sh"
    exit 0
}

function autoMake
{

    #check if an arguments were passed in
    if [ "$#" -eq 0 ]; then
        echo 'USAGE: template -make <files to compile.cpp>'
        exit 1;
    fi

    #ask for the output object name
    echo 'what will be the output file name'
    read OUTPUT

    echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
    " > 'makefile'

    #add all .cpp files to array
    for CURRENT in $@; do
        #ignore header files
        if [[ $CURRENT == *".h" ]]; then
            echo "$CURRENT ignored"
            continue
            #interperate txt files as arguments to program
        elif [[ $CURRENT == *".txt" ]]; then
            echo "argument $CURRENT added"
            ARGUMENT+=($CURRENT)
        else
            #gets rid of extension on files passed in and store in array
            FILE+=$(echo "$CURRENT" | cut -d '"' -f2 | cut -d '.' -f1)
            FILE+=' '
        fi
    done

    #add first rule
    printf "$OUTPUT: " >> makefile

    for CURRENT in ${FILE[@]}; do
        printf "$CURRENT.o " >> makefile
    done
    printf "\n" >> makefile

    #add command for first rule
    printf "\t g++ -Wall -g -o $OUTPUT " >> makefile
    for CURRENT in ${FILE[@]}; do
        printf "$CURRENT.o " >> makefile
    done
    printf " && ./$OUTPUT ${ARGUMENT[*]} | tee output.txt\n\n" >> makefile

    #add clean rule
    printf "clean:\n\trm -f *.o output.txt $OUTPUT\n\n" >> makefile

    #add valgrind rule
    printf "valgrind: $OUTPUT\n\tvalgrind -s --leak-check=full --track-origins=yes ./$OUTPUT\n\n" >> makefile

    #add compile rule
    printf "c: $OUTPUT\n\t./$OUTPUT ${ARGUMENT[*]} | tee output.txt\n\n" >> makefile

    echo "#--------------------------------------------" >> makefile

    #add receipe for the files passed in
    for CURRENT in ${FILE[@]}; do
        printf "$CURRENT.o: $CURRENT.cpp " >> makefile
        if [[ -f "$CURRENT.h" ]]; then
            printf "$CURRENT.h" >> makefile
        fi
        printf "\n\tg++ -c $CURRENT.cpp\n\n" >> makefile

    done

    exit 0
    #$EDITOR makefile
}

function header
{
	echo -e "//purpose of this file:
//Date: ${now}
//---------------------------------
#define _CRT_SECURE_NO_WARNINGS
#ifndef ${FILE_NAME^^}_H_
#define ${FILE_NAME^^}_H_
#include <iostream>
#include <string>
#include <utility>
using std::cout;
using std::endl;
using std::string;

#endif" > "$FILE_NAME.h"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $FILE_NAME.h in new VS code window"
		code -n $FILE_NAME.h
	elif [ "$CODE" = 'true' ]; then
		echo "opening $FILE_NAME.h in VS code"
		code $FILE_NAME.h
	elif [ "$CODE" = 'none' ];then
		echo "$FILE_NAME.h created"
	else
		$EDITOR $FILE_NAME.h
	fi

    exit 0
}

function readme
{
	touch README.md
	if [ "$CODE" = 'new' ]; then 
		echo "opening README.md in new VS code window"
		code -n README.md
	elif [ "$CODE" = 'true' ]; then
		echo "opening README.md in VS code"
		code README.md
	elif [ "$CODE" = 'none' ];then
		echo " README.md created"
	else
		$EDITOR README.md
	fi

    exit 0
}

function main
{
	#flag to determine if code will be opened in vs code or not
	CODE='false'

    case "$1" in
        '-cn')
            CODE='new'
            shift 1;;

        #if -c option is passed in, it will open file in code instead of vim and discard flag
        '-c')
            CODE='true';
            shift 1;;

            #-q flag will not open file
        '-q')
            CODE='none'
            shift 1;;

        '-compile')
            shift 1
            compile $@;;

        #auto generate a make file
        '-make')
            shift 1
            autoMake $@
            ;;

        '-debug')
            shift 1
            debug $@ ;;

        '-readme' | '-read')
            readme ;;
    esac


    #old if statement
	##if -c option is passed in, it will open file in code instead of vim and discard flag
	#if [ "$1" = '-cn' ]; then
		#CODE='new';
		#shift 1
	#elif [ "$1" = '-c' ]; then
		#CODE='true'
		#shift 1
    ##-q flag will do nothing
	#elif [ "$1" = '-q' ]; then
		#CODE='none'
		#shift 1
	##if compile flag is passed in, then create special template for compiling a c++ program and end script
    #elif [ "$1" = '-compile' ]; then
		#shift 1
		#compile $@
	##if make flag is passed in, then auto generate a makefile
	#elif [ "$1" = '-make' ]; then
		#shift 1
		#autoMake $@
	#elif [ "$1" = '-debug' ]; then
		#shift 1
		#debug $@
		#exit 0

	##if read flag is passed in, it will create a README.md file and end script
	#elif [ "$1" = 'read' ] || [ "$1" = 'readme' ]; then
		#readme
		#exit 0;
	#fi

	#if no arguments are passed in, it will ask for input. else it will store first arguement in name variable
	if [ "$#" -eq 0 ]; then
		echo 'What will be the name of the file'
		read FILE_NAME
	else
		FILE_NAME="$1"
	fi

	echo 'what will be the format of the file? (cpp, sh, h, html, read(REAMDE.md)'
	read LANUAGE

    #flag to determine if input is valid
	INPUT='false'

	while [ "$INPUT" == 'false' ]; do
		case "$LANUAGE" in 
			'cpp') cpp ;;
			'sh') bash ;;
			'h') header ;;
			'readme') readme ;;
			'read') readme ;;
			'html') html ;;
			*) echo "***$LANUAGE*** is not a supported formate, supported formats are cpp, sh, h, html and read(README.md)"

			echo 'what format would you like?'
			read LANUAGE
			;;
		esac
	done
}

main $@
