#!/bin/bash
#to get the current date
var=`date +"%FORMAT_STRING"`
now=`date +"%m_%d_%Y"`
now=`date +"%Y-%m-%d"`
function bash 
{
	echo -e "#!/bin/bash
#purpose of this file: 
#Date: ${now}
#---------------------------------




" > "$NAME.sh"
	chmod +x "$NAME.sh"
	#echo "file $NAME.sh created!"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.sh in new VS code window"
		code -n $NAME.sh
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.sh in VS code"
		code $NAME.sh
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.sh created"
	else
		$EDITOR $NAME.sh
	fi
	exit 0; 	
}

function cpp
{
	echo -e "//purpose of this file: 
//Date: ${now}
//---------------------------------
#include <iostream>
#include <string.h>
#include <string>
using namespace std;

int main ()
{

}

" > "$NAME.cpp"
	#echo "file $NAME.cpp created!"
	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.cpp in new VS code window"
		code -n $NAME.cpp
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.cpp in VS code"
		code $NAME.cpp
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.cpp created"
	else
		$EDITOR $NAME.cpp
	fi

	exit 0; 
}
function html
{
	echo -e "<!--purpose of this file: 
Date: ${now}
--------------------------------- -->
<html>

</html>

" > "$NAME.html"


	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.html in new VS code window"
		code -n $NAME.html
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.html in VS code"
		code $NAME.html
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.html created"
	else
		$EDITOR $NAME.html
	fi

	exit 0;
}

function compile
{
	#echo $@
	if [ "$#" -eq 0 ]; then
		echo 'please pass in files to compile as arguments'
		exit 1;
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT

	echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
g++ -o $OUTPUT $@ && ./$OUTPUT" > "compile_$OUTPUT.sh"

	chmod +x "compile_$OUTPUT.sh"

exit 0
}

function cmake
{
	#check if an arguments were passed in
	if [ "$#" -eq 0 ]; then
		echo 'USAGE: template -compile <files to compile.cpp>'
		exit 1; 
	fi

	echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
" > 'makefile'

	#ask for the output object name
	echo 'what will be the output file name'
	read OUTPUT

	for CURRENT in $@; do

		FILE=$(grep '#include "' $CURRENT)
		#if [[ $FILE == *".cpp" ]]; then
			#continue
		#fi
		DEPENDICIES+=($(echo "$FILE" | cut -d '"' -f2 | cut -d '.' -f1))
	done

	printf "all: " >> makefile

	for CURRENT in ${DEPENDICIES[@]}; do
		printf "$CURRENT.o " >> makefile
	done

	printf "\n" >> makefile

	#command for all
	printf "\tg++ -o %s " "$OUTPUT" >>makefile

	#add all dependicies.o under all option
	for FILE in "${DEPENDICIES[@]}"; do
		printf "%s.o " "$FILE" >> makefile
	done

	#add excute excutable line
	printf "&& ./%s" "$OUTPUT" >> makefile

	printf "\n" >> makefile

	for CURRENT in ${DEPENDICIES[@]}; do
		#target
		printf "%s.o: %s.cpp \n" "$CURRENT" "$CURRENT" >> makefile

		printf "\tg++ -c %s.cpp " "$CURRENT" >> makefile

		for FILE in ./*; do
			#check if .h file exist within current directory. cpp file can exist without a .h file, but not vice versa
			if [[ $FILE == "$CURRENT.h" ]]; then
				printf "%s.h" "$CURRENT" >> makefile
			fi
		done

		#add break after first event
		printf "\n" >> makefile
	done

	exit
	######################################
	for CURRENT in $@; do
		#Will ignore the .h files
		if [[ "$CURRENT" == *".h" ]]; then
			continue;
		fi
		ALL_FILES+=($(echo "$CURRENT" | sed 's/\..*//')) #store all file name passed in with no extention
	done

	printf "all: " >> makefile
	for OFILE in ${ALL_FILES[@]}; do
		printf "$OFILE.o " >> makefile
	done

	printf "\n" >> makefile
	printf "\tg++ -o %s " "$OUTPUT" >>makefile

	for FILE in "${ALL_FILES[@]}"; do
		printf "%s.o " "$FILE" >> makefile
	done
	printf "&& ./%s" "$OUTPUT" >> makefile
	printf "\n" >> makefile

	for OBJ in ${ALL_FILES[@]}; do
		#target
		printf "%s.o: %s.cpp \n" "$OBJ" "$OBJ" >> makefile
		printf "\tg++ -c %s.cpp " "$OBJ" >> makefile
		#echo "current file is $OBJ"
		#echo "file.h is $OBJ.h"
		for ARG in $@; do
		{
			if [[ "$OBJ.h" == $ARG ]]; then
				echo .h file exists
				printf "%s.h" "$OBJ" >> makefile
			fi
		}
		done
		#add break after first event
		printf "\n" >> makefile
	done

	#finally add clean
	echo -e "clean: 
	rm *.o $OUTPUT" >> makefile
	#nvim makefile
	exit 0
}

function .h
{
	echo -e "//purpose of this file:
//Date: ${now}
//---------------------------------
#define _CRT_SECURE_NO_WARNINGS
#ifndef SDDS_${NAME^^}_H_
#define SDDS_${NAME^^}_H_
#include <iostream>
#include <string>
#include <cstring>
using namespace std; 


#endif" > "$NAME.h"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.h in new VS code window"
		code -n $NAME.h
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.h in VS code"
		code $NAME.h
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.h created"
	else
		$EDITOR $NAME.h
	fi

	exit 0;
}

function readme
{
	touch README.md
	if [ "$CODE" = 'new' ]; then 
		echo "opening README.md in new VS code window"
		code -n README.md
	elif [ "$CODE" = 'true' ]; then
		echo "opening README.md in VS code"
		code README.md
	elif [ "$CODE" = 'none' ];then
		echo " README.md created"
	else
		$EDITOR README.md
	fi

	exit 0; 
}

function main
{
	#flag to determine if code will be opened in vs code or not
	CODE='false'

	#if -c option is passed in, it will open file in code instead of vim and discard flag
	if [ "$1" = '-cn' ]; then
		CODE='new';
		shift 1
	elif [ "$1" = '-c' ]; then
		CODE='true'
		shift 1
	elif [ "$1" = '-q' ]; then
		CODE='none'
		shift 1
	fi

	#if compile flag is passed in, then create special template for compiling a c++ program and end script
	if [ "$1" = '-compile' ]; then
		shift 1
		compile $@
	#if cmake flag is passed in, then auto generate a makefile
	elif [ "$1" = '-cmake' ]; then
		shift 1
		cmake $@
	#if read flag is passed in, it will create a README.md file and end script
	elif [ "$1" = 'read' ] || [ "$1" = 'readme' ]; then
		readme
		exit 0; 
	fi

	#if no arguments are passed in, it will ask for an argument. else it will store first arguement in name variable
	if [ "$#" -eq 0 ]; then
		echo 'What will be the name of the file'
		read NAME
	else #or name of the file can be passed in as an argument
		NAME="$1"
	fi

	echo 'what will be the format of the file? (cpp, sh, .h, html, read(REAMDE.md), compile template, or cmake)'
	read LANUAGE
	INPUT='false'
	while [ "$INPUT" = "false" ]; do
		
		case "$LANUAGE" in 
			'cpp') cpp ;;
			'sh') bash ;;
			'.h') .h ;;
			'readme') readme ;;
			'read') readme ;;
			'html') html ;;
			*) echo "***$LANUAGE*** is not a supported formate, supported formats are cpp, sh, .h, html and read(README.md)"

			echo 'what will be the name of the file'
			read NAME

			echo 'what format would you like? (cpp, sh, .h, html, read(REAMDE.md) and compile template)'
			read LANUAGE;;  
		esac
	done
}

main $@
