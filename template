#!/bin/bash
#to get the current date
var=`date +"%FORMAT_STRING"`
now=`date +"%m_%d_%Y"`
now=`date +"%Y-%m-%d"`
function bash 
{
	echo -e "#!/bin/bash
#purpose of this file: 
#Date: ${now}
#---------------------------------




" > "$NAME.sh"
	chmod +x $NAME.sh

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.sh in new VS code window"
		code -n $NAME.sh
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.sh in VS code"
		code $NAME.sh
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.sh created"
	else
		$EDITOR $NAME.sh
	fi
	exit 0; 	
}

function cpp
{
	echo -e "//purpose of this file: 
//Date: ${now}
//---------------------------------
#include <iostream>
#include <string>
using namespace std;

int main ()
{

}

" > "$NAME.cpp"
	#echo "file $NAME.cpp created!"
	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.cpp in new VS code window"
		code -n $NAME.cpp
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.cpp in VS code"
		code $NAME.cpp
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.cpp created"
	else
		$EDITOR $NAME.cpp
	fi

	exit 0; 
}
function html
{
	echo -e "<!--purpose of this file: 
Date: ${now}
--------------------------------- -->
<html>

</html>

" > "$NAME.html"


	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.html in new VS code window"
		code -n $NAME.html
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.html in VS code"
		code $NAME.html
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.html created"
	else
		$EDITOR $NAME.html
	fi

	exit 0;
}

function compile
{
	#echo $@
	if [ "$#" -eq 0 ]; then
		echo 'please pass in files to compile as arguments'
		exit 1;
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT

	echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
g++ -g -Wall -o $OUTPUT $@ && ./$OUTPUT" > "compile_$OUTPUT.sh"

	chmod +x "compile_$OUTPUT.sh"
exit 0
}


function debug
{
	#echo $@
	if [ "$#" -eq 0 ]; then
		echo 'please pass in files to compile as arguments'
		exit 1;
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT

	echo -e "#purpose of the file: to debug $OUTPUT
#date: ${now}
#-------------------------------------------------
g++ -g -o $OUTPUT $@ && valgrind --leak-check=full ./$OUTPUT" > "compile_$OUTPUT.sh"

	chmod +x "compile_$OUTPUT.sh"
exit 0
}

function make
{

    #check if an arguments were passed in
    if [ "$#" -eq 0 ]; then
        echo 'USAGE: template -make <files to compile.cpp>'
        exit 1;
    fi

    #ask for the output object name
    echo 'what will be the output file name'
    read OUTPUT

    echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
    " > 'makefile'

    #add all .cpp files to array
    for CURRENT in $@; do
        if [[ $CURRENT == *".h" ]]; then
            echo "$CURRENT ignored"
            continue
        fi
        #gets rid of extension on files passed in and store in array
        FILE+=$(echo "$CURRENT" | cut -d '"' -f2 | cut -d '.' -f1)
    done

    #add first rule
    printf "$OUTPUT: " >> makefile

    for CURRENT in ${FILE[@]}; do
        printf "$CURRENT.o " >> makefile

        ##check if .h file exist
        #if [[ -f "$CURRENT.h" ]]; then
            ##if .h file exist, add to make file
            #printf "$CURRENT.h" >> makefile
        #fi
    done
    printf "\n" >> makefile

    #add command for first rule
    printf "\t g++ -Wall -g -o $OUTPUT " >> makefile
    for CURRENT in ${FILE[@]}; do
        printf "$CURRENT.o" >> makefile
    done
    printf " && ./$OUTPUT | tee output.txt\n\n" >> makefile

    #add clean rule
    printf "clean:\n\trm -f *.o $OUTPUT\n\n" >> makefile

    #add mem check rule
    printf "memory: $OUTPUT\n\tvalgrind -s --leak-check=full --track-origins=yes ./$OUTPUT\n\n" >> makefile
    $EDITOR makefile
    exit
}

function .h
{
	echo -e "//purpose of this file:
//Date: ${now}
//---------------------------------
#define _CRT_SECURE_NO_WARNINGS
#ifndef ${NAME^^}_H_
#define ${NAME^^}_H_
#include <iostream>
#include <string>
#include <cstring>
using namespace std; 


#endif" > "$NAME.h"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.h in new VS code window"
		code -n $NAME.h
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.h in VS code"
		code $NAME.h
	elif [ "$CODE" = 'none' ];then
		echo "$NAME.h created"
	else
		$EDITOR $NAME.h
	fi

	exit 0;
}

function readme
{
	touch README.md
	if [ "$CODE" = 'new' ]; then 
		echo "opening README.md in new VS code window"
		code -n README.md
	elif [ "$CODE" = 'true' ]; then
		echo "opening README.md in VS code"
		code README.md
	elif [ "$CODE" = 'none' ];then
		echo " README.md created"
	else
		$EDITOR README.md
	fi

	exit 0; 
}

function main
{
	#flag to determine if code will be opened in vs code or not
	CODE='false'

	#if -c option is passed in, it will open file in code instead of vim and discard flag
	if [ "$1" = '-cn' ]; then
		CODE='new';
		shift 1
	elif [ "$1" = '-c' ]; then
		CODE='true'
		shift 1
    #-q flag will do nothing
	elif [ "$1" = '-q' ]; then
		CODE='none'
		shift 1
	#if compile flag is passed in, then create special template for compiling a c++ program and end script
    elif [ "$1" = '-compile' ]; then
		shift 1
		compile $@
	#if make flag is passed in, then auto generate a makefile
	elif [ "$1" = '-make' ]; then
		shift 1
		make $@
	elif [ "$1" = '-debug' ]; then
		shift 1
		debug $@
	#if read flag is passed in, it will create a README.md file and end script
	elif [ "$1" = 'read' ] || [ "$1" = 'readme' ]; then
		readme
		exit 0; 
	fi

	#if no arguments are passed in, it will ask for an argument. else it will store first arguement in name variable
	if [ "$#" -eq 0 ]; then
		echo 'What will be the name of the file'
		read NAME
	else #or name of the file can be passed in as an argument
		NAME="$1"
	fi

	echo 'what will be the format of the file? (cpp, sh, .h, html, read(REAMDE.md)'
	read LANUAGE

	INPUT='false'
	while [ "$INPUT" = "false" ]; do
		
		case "$LANUAGE" in 
			'cpp') cpp ;;
			'sh') bash ;;
			'.h') .h ;;
			'readme') readme ;;
			'read') readme ;;
			'html') html ;;
			*) echo "***$LANUAGE*** is not a supported formate, supported formats are cpp, sh, h, html and read(README.md)"

			echo 'what will be the name of the file'
			read NAME

			echo 'what format would you like? (cpp, sh, h, html, and read(REAMDE.md)'
			read LANUAGE
		esac
	done
}

main $@
