#!/bin/bash
#to get the current date
var=`date +"%FORMAT_STRING"`
now=`date +"%m_%d_%Y"`
now=`date +"%Y-%m-%d"`
function bash 
{
	echo -e "#!/bin/bash
#purpose of this file: 
#Date: ${now} 
#---------------------------------




" > "$NAME.sh"
	chmod +x "$NAME.sh"
	#echo "file $NAME.sh created!"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.sh in new VS code window"
		code -n $NAME.sh
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.sh in VS code"
		code $NAME.sh
	else
		vim $NAME.sh
	fi
	exit 0; 	
}

function cpp
{
	echo -e "//purpose of this file: 
//Date: ${now}
//---------------------------------
#include <iostream>
#include <string.h>
#include <string>
using namespace std;

int main ()
{

}

" > "$NAME.cpp"
	#echo "file $NAME.cpp created!"
	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.cpp in new VS code window"
		code -n $NAME.cpp
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.cpp in VS code"
		code $NAME.cpp
	else
		vim $NAME.cpp
	fi

	exit 0; 
}
function html
{
	echo -e "<!--purpose of this file: 
Date: ${now}
--------------------------------- -->
<html>

</html>

" > "$NAME.html"


	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.html in new VS code window"
		code -n $NAME.html
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.html in VS code"
		code $NAME.html
	else
		vim $NAME.html
	fi

	exit 0;
}

function compile
{
	#echo $@
	if [ "$#" -eq 0 ]; then
		echo 'please pass in files to compile as arguments'
		exit 1;
	fi

	#ask for the output file name
	echo 'what will be the output file name'
	read OUTPUT

	echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
g++ -o $OUTPUT $@ && ./$OUTPUT" > "compile_$OUTPUT.sh"

	chmod +x "compile_$OUTPUT.sh"

exit 0
}

function cmake
{
	#check if an arguments were passed in
	if [ "$#" -eq 0 ]; then
		echo 'USAGE: template -compile <files to compile.cpp>'
		exit 1; 
	fi

	echo -e "#purpose of the file: to compile $OUTPUT
#date: ${now}
#-------------------------------------------------
" > 'makefile'

	#ask for the output object name
	echo 'what will be the output file name'
	read OUTPUT

	for CURRENT in $@; do
		#Will ignore the .h files
		if [[ "$CURRENT" == *".h" ]]; then
			continue;
		fi
		ALL_FILES+=($(echo "$CURRENT" | sed 's/\..*//')) #store all file name passed in with no extention
	done

	echo "all: " >> makefile
	printf "\tg++ -o %s " "$OUTPUT" >>makefile

	for FILE in "${ALL_FILES[@]}"; do
		printf "%s.o " "$FILE" >> makefile
	done
	printf "&& ./%s" "$OUTPUT" >> makefile
	echo -e "\n\n " >> makefile

	for OBJ in ${ALL_FILES[@]}; do
		printf "%s.o: %s.cpp \n" "$OBJ" "$OBJ" >> makefile
		printf "\tg++ -c %s.cpp " "$OBJ"

		echo "current file is $OBJ"
		echo "file.h is $OBJ.h"
		for ARG in $@; do
		{
			if [[ "$OBJ.h" == $ARG ]]; then
				echo .h file exists
			fi
		}
		done

	done

	nvim makefile
	exit



	####################################################
	#ask for the output object name
	echo 'what will be the output file name'
	read OUTPUT
	
	#finding dependicies in all .cpp files. will ignore all .h files
	DEPENDENCIES=() #declare an empty array
	for j in "$@"; do
		#if .h file detected, ignore file
		if [[ "$j" == "*.h" ]]; then
			continue;
		fi
		#echo "in forloop"
		#echo "current file is $j"

		TMP=$(grep '#include "' $j | cut -d "\"" -f2) #strips everything outside the quotes, leaving only the file name inside the double quotes

		#echo "after parse is $TMP"
		DEPENDENCIES+=( ${TMP} ) #store the file names with the file extentions in array
		echo "DEPENDENCIES are ${DEPENDENCIES[@]}"
	done 


	#sets the first output option in the file by appening all files after "output: "
	printf 'output: ' >> 'makefile'
	for CURRENT in $@; do
		CURRENT=$(echo "$CURRENT" | sed 's/\..*//') #gets rid of file extention.
		printf '%s.o ' "$CURRENT" >> 'makefile' #adds .o extention to files 

	done
	printf "\n"
	echo -e "\n	\$(CC) $@ -o $OUTPUT && ./$OUTPUT" >> 'makefile' #add g++ <all files> as the default output option

	#loop through the entirety of the array
	for((x=0; x<${#DEPENDENCIES[@]}; x++)); do
		#check if any dependicies exist by checking to make sure array size is greater than 0
		if [[ ${#DEPENDENCIES[@]} -eq 0 ]]; then
			#if no dependicies, exit loop
			break
		fi
		#if dependcies do exist, add to the file in the formate:
		#dependicy.o 
			#g++ -c dependicy
		echo -e "$(echo "${DEPENDENCIES[$x]}" | sed 's/\..*/.o/'): ${DEPENDENCIES[$x]} 
	\$(CC) -c ${DEPENDENCIES[$x]}" >> 'makefile'
#	echo "DEPENDENCIES x is ${DEPENDENCIES[$x]}"
	#do this for the number of dependcies found
	done

	#finally add clean
	echo -e "clean: 
	rm *.o $OUTPUT" >> "makefile" 
	exit 0
}

function .h
{
	echo -e "//purpose of this file:
//Date: ${now}
//---------------------------------
#define _CRT_SECURE_NO_WARNINGS
#ifndef SDDS_${NAME^^}_H_
#define SDDS_${NAME^^}_H_
#include <iostream>
#include <string>
#include <cstring>
using namespace std; 


#endif" > "$NAME.h"
	chmod +x "$NAME.h"

	if [ "$CODE" = 'new' ]; then 
		echo "opening $NAME.h in new VS code window"
		code -n $NAME.h
	elif [ "$CODE" = 'true' ]; then
		echo "opening $NAME.h in VS code"
		code $NAME.h
	else
		vim $NAME.h
	fi

	exit 0;
}

function readme
{
	touch README.md
	if [ "$CODE" = 'new' ]; then 
		echo "opening README.md in new VS code window"
		code -n README.md
	elif [ "$CODE" = 'true' ]; then
		echo "opening README.md in VS code"
		code README.md
	else
		vim README.md
	fi

	exit 0; 
}

function main
{
	#flag to determine if code will be opened in vs code or not
	CODE='false'

	#if -c option is passed in, it will open file in code instead of vim and discard flag
	if [ "$1" = '-cn' ]; then
		CODE='new';
		shift 1
	elif [ "$1" = '-c' ]; then
		CODE='true'
		shift 1
	fi

	#if compile flag is passed in, then create special template for compiling a c++ program and end script
	if [ "$1" = '-compile' ]; then
		shift 1
		compile $@
	fi

	#if read flag is passed in, it will create a README.md file and end script
	if [ "$1" = 'read' ] || [ "$1" = 'readme' ]; then
		readme
		exit 0; 
	fi

	#if no arguments are passed in, it will ask for an argument. else it will store first arguement in name variable
	if [ "$#" -eq 0 ]; then
		echo 'What will be the name of the file'
		read NAME
	else #or name of the file can be passed in as an argument
		NAME=$1
	fi

	echo 'what will be the format of the file? (cpp, sh, .h, html, read(REAMDE.md) and compile template)'
	read LANUAGE
	INPUT='false'
	while [ "$INPUT" = "false" ]; do
		
		case "$LANUAGE" in 
			'cpp') cpp ;;
			'sh') bash ;;
			'.h') .h ;;
			'readme') readme ;;
			'read') readme ;;
			'html') html ;;
			*) echo "***$LANUAGE*** is not a supported formate, supported formats are cpp, sh, .h, html, read(README.md) and compile template"

			echo 'what will be the name of the file'
			read NAME

			echo 'what format would you like? (cpp, sh, .h, html, read(REAMDE.md) and compile template)'
			read LANUAGE;;  
		esac
	done
}

main $@
